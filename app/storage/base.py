from __future__ import annotations
from typing import Any, Dict, List, Optional, Tuple
from ..models import Mock, MockCreate, MockUpdate, Scenario, ScenarioCreate, ScenarioUpdate

class AbstractStore:
    async def list_mocks(self) -> List[Mock]: ...
    async def get_mock(self, mock_id: str) -> Mock: ...
    async def create_mock(self, m: MockCreate) -> Mock: ...
    async def update_mock(self, mock_id: str, patch: MockUpdate) -> Mock: ...
    async def delete_mock(self, mock_id: str) -> None: ...
    async def list_scenarios(self) -> List[Scenario]: ...
    async def get_scenario(self, basepath: str) -> Scenario: ...
    async def create_scenario(self, sc: ScenarioCreate) -> Scenario: ...
    async def update_scenario(self, basepath: str, patch: ScenarioUpdate) -> Scenario: ...
    async def delete_scenario(self, basepath: str) -> None: ...
    async def find_match(self, path: str, method: str, query, headers, body) -> Optional[tuple]: ...
